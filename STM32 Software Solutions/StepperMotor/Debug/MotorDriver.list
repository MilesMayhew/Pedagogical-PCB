
MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002024  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080020e0  080020e0  000030e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002120  08002120  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002120  08002120  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002120  08002120  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002120  08002120  00003120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002124  08002124  00003124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002128  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002134  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002134  0000409c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a05f  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4c  00000000  00000000  0000e093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0000fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000846  00000000  00000000  00010598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001727d  00000000  00000000  00010dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be7d  00000000  00000000  0002805b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097595  00000000  00000000  00033ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb46d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002624  00000000  00000000  000cb4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000cdad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080020c8 	.word	0x080020c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080020c8 	.word	0x080020c8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <MotorDriver_Init>:
static MotorDirection currentDirection = MOTOR_STOP; // Variable to store the current direction

// Initialize the motor driver
void MotorDriver_Init(MotorDriver* driver, TIM_HandleTypeDef* timer, uint32_t pwmChannel,
                      GPIO_TypeDef* pin1Port, uint16_t pin1,
                      GPIO_TypeDef* pin2Port, uint16_t pin2) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]
    driver->timer = timer;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
    driver->pwmChannel = pwmChannel;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	605a      	str	r2, [r3, #4]
    driver->pin1Port = pin1Port;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	683a      	ldr	r2, [r7, #0]
 800023a:	609a      	str	r2, [r3, #8]
    driver->pin1 = pin1;
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	2118      	movs	r1, #24
 8000240:	2008      	movs	r0, #8
 8000242:	180b      	adds	r3, r1, r0
 8000244:	19db      	adds	r3, r3, r7
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	8193      	strh	r3, [r2, #12]
    driver->pin2Port = pin2Port;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800024e:	611a      	str	r2, [r3, #16]
    driver->pin2 = pin2;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	2420      	movs	r4, #32
 8000254:	1822      	adds	r2, r4, r0
 8000256:	19d2      	adds	r2, r2, r7
 8000258:	8812      	ldrh	r2, [r2, #0]
 800025a:	829a      	strh	r2, [r3, #20]

    // Initialize both pins low
    HAL_GPIO_WritePin(pin1Port, pin1, GPIO_PIN_RESET);
 800025c:	0005      	movs	r5, r0
 800025e:	180b      	adds	r3, r1, r0
 8000260:	19db      	adds	r3, r3, r7
 8000262:	8819      	ldrh	r1, [r3, #0]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	2200      	movs	r2, #0
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fd95 	bl	8000d98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin2Port, pin2, GPIO_PIN_RESET);
 800026e:	1963      	adds	r3, r4, r5
 8000270:	19db      	adds	r3, r3, r7
 8000272:	8819      	ldrh	r1, [r3, #0]
 8000274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000276:	2200      	movs	r2, #0
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fd8d 	bl	8000d98 <HAL_GPIO_WritePin>
}
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b004      	add	sp, #16
 8000284:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000288 <MotorDriver_SetPWMDutyCycle>:

// Set PWM duty cycle
void MotorDriver_SetPWMDutyCycle(MotorDriver* driver, uint32_t dutyCycle) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
    if (dutyCycle <= 100) {
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	2b64      	cmp	r3, #100	@ 0x64
 8000296:	d802      	bhi.n	800029e <MotorDriver_SetPWMDutyCycle+0x16>
        currentDutyCycle = dutyCycle;
 8000298:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <MotorDriver_SetPWMDutyCycle+0x20>)
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	601a      	str	r2, [r3, #0]
    }
}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b002      	add	sp, #8
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			@ (mov r8, r8)
 80002a8:	20000028 	.word	0x20000028

080002ac <MotorDriver_SetDirection>:

// Set direction (use enum for clarity)
void MotorDriver_SetDirection(MotorDriver* driver, MotorDirection direction) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	000a      	movs	r2, r1
 80002b6:	1cfb      	adds	r3, r7, #3
 80002b8:	701a      	strb	r2, [r3, #0]
    currentDirection = direction;
 80002ba:	4b18      	ldr	r3, [pc, #96]	@ (800031c <MotorDriver_SetDirection+0x70>)
 80002bc:	1cfa      	adds	r2, r7, #3
 80002be:	7812      	ldrb	r2, [r2, #0]
 80002c0:	701a      	strb	r2, [r3, #0]

    // Clear both pins before changing states
    HAL_GPIO_WritePin(driver->pin1Port, driver->pin1, GPIO_PIN_RESET);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6898      	ldr	r0, [r3, #8]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	899b      	ldrh	r3, [r3, #12]
 80002ca:	2200      	movs	r2, #0
 80002cc:	0019      	movs	r1, r3
 80002ce:	f000 fd63 	bl	8000d98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(driver->pin2Port, driver->pin2, GPIO_PIN_RESET);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	6918      	ldr	r0, [r3, #16]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	8a9b      	ldrh	r3, [r3, #20]
 80002da:	2200      	movs	r2, #0
 80002dc:	0019      	movs	r1, r3
 80002de:	f000 fd5b 	bl	8000d98 <HAL_GPIO_WritePin>

    switch (direction) {
 80002e2:	1cfb      	adds	r3, r7, #3
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d002      	beq.n	80002f0 <MotorDriver_SetDirection+0x44>
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d009      	beq.n	8000302 <MotorDriver_SetDirection+0x56>
            HAL_GPIO_WritePin(driver->pin2Port, driver->pin2, GPIO_PIN_SET); // Enable pin2
            break;
        case MOTOR_STOP:
        default:
            // Both are already set to LOW
            break;
 80002ee:	e011      	b.n	8000314 <MotorDriver_SetDirection+0x68>
            HAL_GPIO_WritePin(driver->pin1Port, driver->pin1, GPIO_PIN_SET); // Enable pin1
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6898      	ldr	r0, [r3, #8]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	899b      	ldrh	r3, [r3, #12]
 80002f8:	2201      	movs	r2, #1
 80002fa:	0019      	movs	r1, r3
 80002fc:	f000 fd4c 	bl	8000d98 <HAL_GPIO_WritePin>
            break;
 8000300:	e008      	b.n	8000314 <MotorDriver_SetDirection+0x68>
            HAL_GPIO_WritePin(driver->pin2Port, driver->pin2, GPIO_PIN_SET); // Enable pin2
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	6918      	ldr	r0, [r3, #16]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	8a9b      	ldrh	r3, [r3, #20]
 800030a:	2201      	movs	r2, #1
 800030c:	0019      	movs	r1, r3
 800030e:	f000 fd43 	bl	8000d98 <HAL_GPIO_WritePin>
            break;
 8000312:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000314:	46c0      	nop			@ (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b002      	add	sp, #8
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000031 	.word	0x20000031

08000320 <MotorDriver_GeneratePWMOutput>:

// Generate PWM signal in software
void MotorDriver_GeneratePWMOutput(MotorDriver* driver) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
    if (currentDirection == MOTOR_STOP) {
 8000328:	4b3e      	ldr	r3, [pc, #248]	@ (8000424 <MotorDriver_GeneratePWMOutput+0x104>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d110      	bne.n	8000352 <MotorDriver_GeneratePWMOutput+0x32>
        // Ensure both pins are low
        HAL_GPIO_WritePin(driver->pin1Port, driver->pin1, GPIO_PIN_RESET);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6898      	ldr	r0, [r3, #8]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	899b      	ldrh	r3, [r3, #12]
 8000338:	2200      	movs	r2, #0
 800033a:	0019      	movs	r1, r3
 800033c:	f000 fd2c 	bl	8000d98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(driver->pin2Port, driver->pin2, GPIO_PIN_RESET);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	6918      	ldr	r0, [r3, #16]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	8a9b      	ldrh	r3, [r3, #20]
 8000348:	2200      	movs	r2, #0
 800034a:	0019      	movs	r1, r3
 800034c:	f000 fd24 	bl	8000d98 <HAL_GPIO_WritePin>
        return; // Skip PWM generation if stopped
 8000350:	e064      	b.n	800041c <MotorDriver_GeneratePWMOutput+0xfc>
    }

    // Update the elapsed time (this should be in ms)
    elapsedTime++;
 8000352:	4b35      	ldr	r3, [pc, #212]	@ (8000428 <MotorDriver_GeneratePWMOutput+0x108>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	4b33      	ldr	r3, [pc, #204]	@ (8000428 <MotorDriver_GeneratePWMOutput+0x108>)
 800035a:	601a      	str	r2, [r3, #0]

    uint32_t highTime = (currentDutyCycle * PWM_PERIOD_MS) / 100;
 800035c:	4b33      	ldr	r3, [pc, #204]	@ (800042c <MotorDriver_GeneratePWMOutput+0x10c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2164      	movs	r1, #100	@ 0x64
 8000362:	0018      	movs	r0, r3
 8000364:	f7ff fece 	bl	8000104 <__udivsi3>
 8000368:	0003      	movs	r3, r0
 800036a:	60fb      	str	r3, [r7, #12]
    uint32_t lowTime = PWM_PERIOD_MS - highTime;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	2201      	movs	r2, #1
 8000370:	1ad3      	subs	r3, r2, r3
 8000372:	60bb      	str	r3, [r7, #8]

    // Determine the state of the output based on elapsed time and PWM state
    if (pwmState == 0) {
 8000374:	4b2e      	ldr	r3, [pc, #184]	@ (8000430 <MotorDriver_GeneratePWMOutput+0x110>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d134      	bne.n	80003e6 <MotorDriver_GeneratePWMOutput+0xc6>
        // Time to turn the output high
        if (elapsedTime >= highTime) {
 800037c:	4b2a      	ldr	r3, [pc, #168]	@ (8000428 <MotorDriver_GeneratePWMOutput+0x108>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	429a      	cmp	r2, r3
 8000384:	d84a      	bhi.n	800041c <MotorDriver_GeneratePWMOutput+0xfc>
            if (currentDirection == MOTOR_FORWARD) {
 8000386:	4b27      	ldr	r3, [pc, #156]	@ (8000424 <MotorDriver_GeneratePWMOutput+0x104>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d110      	bne.n	80003b0 <MotorDriver_GeneratePWMOutput+0x90>
                HAL_GPIO_WritePin(driver->pin1Port, driver->pin1, GPIO_PIN_SET);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6898      	ldr	r0, [r3, #8]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	899b      	ldrh	r3, [r3, #12]
 8000396:	2201      	movs	r2, #1
 8000398:	0019      	movs	r1, r3
 800039a:	f000 fcfd 	bl	8000d98 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(driver->pin2Port, driver->pin2, GPIO_PIN_RESET);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6918      	ldr	r0, [r3, #16]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	8a9b      	ldrh	r3, [r3, #20]
 80003a6:	2200      	movs	r2, #0
 80003a8:	0019      	movs	r1, r3
 80003aa:	f000 fcf5 	bl	8000d98 <HAL_GPIO_WritePin>
 80003ae:	e013      	b.n	80003d8 <MotorDriver_GeneratePWMOutput+0xb8>
            } else if (currentDirection == MOTOR_REVERSE) {
 80003b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <MotorDriver_GeneratePWMOutput+0x104>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d10f      	bne.n	80003d8 <MotorDriver_GeneratePWMOutput+0xb8>
                HAL_GPIO_WritePin(driver->pin1Port, driver->pin1, GPIO_PIN_RESET);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6898      	ldr	r0, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	899b      	ldrh	r3, [r3, #12]
 80003c0:	2200      	movs	r2, #0
 80003c2:	0019      	movs	r1, r3
 80003c4:	f000 fce8 	bl	8000d98 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(driver->pin2Port, driver->pin2, GPIO_PIN_SET);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6918      	ldr	r0, [r3, #16]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	8a9b      	ldrh	r3, [r3, #20]
 80003d0:	2201      	movs	r2, #1
 80003d2:	0019      	movs	r1, r3
 80003d4:	f000 fce0 	bl	8000d98 <HAL_GPIO_WritePin>
            }
            pwmState = 1;  // Set state to high
 80003d8:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <MotorDriver_GeneratePWMOutput+0x110>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
            elapsedTime = 0; // Reset elapsed time
 80003de:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <MotorDriver_GeneratePWMOutput+0x108>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	e01a      	b.n	800041c <MotorDriver_GeneratePWMOutput+0xfc>
        }
    } else {
        // Time to turn the output low
        if (elapsedTime >= lowTime) {
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <MotorDriver_GeneratePWMOutput+0x108>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	68ba      	ldr	r2, [r7, #8]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d815      	bhi.n	800041c <MotorDriver_GeneratePWMOutput+0xfc>
            HAL_GPIO_WritePin(driver->pin1Port, driver->pin1, GPIO_PIN_RESET);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6898      	ldr	r0, [r3, #8]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	899b      	ldrh	r3, [r3, #12]
 80003f8:	2200      	movs	r2, #0
 80003fa:	0019      	movs	r1, r3
 80003fc:	f000 fccc 	bl	8000d98 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(driver->pin2Port, driver->pin2, GPIO_PIN_RESET);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6918      	ldr	r0, [r3, #16]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	8a9b      	ldrh	r3, [r3, #20]
 8000408:	2200      	movs	r2, #0
 800040a:	0019      	movs	r1, r3
 800040c:	f000 fcc4 	bl	8000d98 <HAL_GPIO_WritePin>
            pwmState = 0;  // Set state to low
 8000410:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <MotorDriver_GeneratePWMOutput+0x110>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
            elapsedTime = 0; // Reset elapsed time
 8000416:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <MotorDriver_GeneratePWMOutput+0x108>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
        }
    }
}
 800041c:	46bd      	mov	sp, r7
 800041e:	b004      	add	sp, #16
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	20000031 	.word	0x20000031
 8000428:	2000002c 	.word	0x2000002c
 800042c:	20000028 	.word	0x20000028
 8000430:	20000030 	.word	0x20000030

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 f9e5 	bl	8000808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f823 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000442:	f000 f8c3 	bl	80005cc <MX_GPIO_Init>
  MX_TIM3_Init();
 8000446:	f000 f867 	bl	8000518 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Assume TIM_HandleTypeDef and GPIO configuration done
  MotorDriver_Init(&motorDriver, &htim3, TIM_CHANNEL_1, GPIOA, GPIO_PIN_5, GPIOD, GPIO_PIN_6);
 800044a:	23a0      	movs	r3, #160	@ 0xa0
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	490b      	ldr	r1, [pc, #44]	@ (800047c <main+0x48>)
 8000450:	480b      	ldr	r0, [pc, #44]	@ (8000480 <main+0x4c>)
 8000452:	2240      	movs	r2, #64	@ 0x40
 8000454:	9202      	str	r2, [sp, #8]
 8000456:	4a0b      	ldr	r2, [pc, #44]	@ (8000484 <main+0x50>)
 8000458:	9201      	str	r2, [sp, #4]
 800045a:	2220      	movs	r2, #32
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	2200      	movs	r2, #0
 8000460:	f7ff fedc 	bl	800021c <MotorDriver_Init>

  // Set PWM duty cycle to 50%
  MotorDriver_SetPWMDutyCycle(&motorDriver, 10);
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <main+0x4c>)
 8000466:	210a      	movs	r1, #10
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ff0d 	bl	8000288 <MotorDriver_SetPWMDutyCycle>
  MotorDriver_SetDirection(&motorDriver, MOTOR_FORWARD);
 800046e:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <main+0x4c>)
 8000470:	2101      	movs	r1, #1
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff ff1a 	bl	80002ac <MotorDriver_SetDirection>
  // Set direction to use pin1 (1 for true) or pin2 (0 for false)
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	e7fd      	b.n	8000478 <main+0x44>
 800047c:	20000034 	.word	0x20000034
 8000480:	20000080 	.word	0x20000080
 8000484:	50000c00 	.word	0x50000c00

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b093      	sub	sp, #76	@ 0x4c
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	2410      	movs	r4, #16
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2338      	movs	r3, #56	@ 0x38
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f001 fde9 	bl	8002070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049e:	003b      	movs	r3, r7
 80004a0:	0018      	movs	r0, r3
 80004a2:	2310      	movs	r3, #16
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f001 fde2 	bl	8002070 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fc8f 	bl	8000dd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2202      	movs	r2, #2
 80004ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2280      	movs	r2, #128	@ 0x80
 80004c0:	0052      	lsls	r2, r2, #1
 80004c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2240      	movs	r2, #64	@ 0x40
 80004ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fcbb 	bl	8000e54 <HAL_RCC_OscConfig>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004e2:	f000 f8dd 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	003b      	movs	r3, r7
 80004e8:	2207      	movs	r2, #7
 80004ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ec:	003b      	movs	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	003b      	movs	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f8:	003b      	movs	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fe:	003b      	movs	r3, r7
 8000500:	2100      	movs	r1, #0
 8000502:	0018      	movs	r0, r3
 8000504:	f000 ffc0 	bl	8001488 <HAL_RCC_ClockConfig>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800050c:	f000 f8c8 	bl	80006a0 <Error_Handler>
  }
}
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b013      	add	sp, #76	@ 0x4c
 8000516:	bd90      	pop	{r4, r7, pc}

08000518 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051e:	2310      	movs	r3, #16
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	0018      	movs	r0, r3
 8000524:	2310      	movs	r3, #16
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f001 fda1 	bl	8002070 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	0018      	movs	r0, r3
 8000532:	230c      	movs	r3, #12
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f001 fd9a 	bl	8002070 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800053c:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 800053e:	4a21      	ldr	r2, [pc, #132]	@ (80005c4 <MX_TIM3_Init+0xac>)
 8000540:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000542:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 8000544:	223f      	movs	r2, #63	@ 0x3f
 8000546:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000548:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800054e:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 8000550:	4a1d      	ldr	r2, [pc, #116]	@ (80005c8 <MX_TIM3_Init+0xb0>)
 8000552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000554:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055a:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000560:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f91a 	bl	800179c <HAL_TIM_Base_Init>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800056c:	f000 f898 	bl	80006a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000570:	2110      	movs	r1, #16
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	0152      	lsls	r2, r2, #5
 8000578:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800057a:	187a      	adds	r2, r7, r1
 800057c:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fac7 	bl	8001b14 <HAL_TIM_ConfigClockSource>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800058a:	f000 f889 	bl	80006a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800059a:	1d3a      	adds	r2, r7, #4
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 fcdf 	bl	8001f64 <HAL_TIMEx_MasterConfigSynchronization>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005aa:	f000 f879 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005ae:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <MX_TIM3_Init+0xa8>)
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 f94b 	bl	800184c <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM3_Init 2 */

}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b008      	add	sp, #32
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000034 	.word	0x20000034
 80005c4:	40000400 	.word	0x40000400
 80005c8:	000003e7 	.word	0x000003e7

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b089      	sub	sp, #36	@ 0x24
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	240c      	movs	r4, #12
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	0018      	movs	r0, r3
 80005d8:	2314      	movs	r3, #20
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f001 fd47 	bl	8002070 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <MX_GPIO_Init+0xb4>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e6:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <MX_GPIO_Init+0xb4>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <MX_GPIO_Init+0xb4>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_GPIO_Init+0xb4>)
 80005fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005fe:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000600:	2108      	movs	r1, #8
 8000602:	430a      	orrs	r2, r1
 8000604:	635a      	str	r2, [r3, #52]	@ 0x34
 8000606:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800060a:	2208      	movs	r2, #8
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000612:	23a0      	movs	r3, #160	@ 0xa0
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fbbc 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000622:	2200      	movs	r2, #0
 8000624:	2160      	movs	r1, #96	@ 0x60
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fbb6 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2220      	movs	r2, #32
 8000630:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2201      	movs	r2, #1
 8000636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	193a      	adds	r2, r7, r4
 8000646:	23a0      	movs	r3, #160	@ 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fa3f 	bl	8000ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000652:	0021      	movs	r1, r4
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2260      	movs	r2, #96	@ 0x60
 8000658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	187b      	adds	r3, r7, r1
 800066e:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000670:	0019      	movs	r1, r3
 8000672:	0010      	movs	r0, r2
 8000674:	f000 fa2c 	bl	8000ad0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b009      	add	sp, #36	@ 0x24
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	50000c00 	.word	0x50000c00

08000688 <HandleMotorPWM>:

/* USER CODE BEGIN 4 */
void HandleMotorPWM(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    // Call the PWM generation function here
    MotorDriver_GeneratePWMOutput(&motorDriver); // Update PWM output based on the motor state
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <HandleMotorPWM+0x14>)
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff fe46 	bl	8000320 <MotorDriver_GeneratePWMOutput>
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	20000080 	.word	0x20000080

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	e7fd      	b.n	80006a8 <Error_Handler+0x8>

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <HAL_MspInit+0x44>)
 80006b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <HAL_MspInit+0x44>)
 80006b8:	2101      	movs	r1, #1
 80006ba:	430a      	orrs	r2, r1
 80006bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <HAL_MspInit+0x44>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c2:	2201      	movs	r2, #1
 80006c4:	4013      	ands	r3, r2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_MspInit+0x44>)
 80006cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <HAL_MspInit+0x44>)
 80006d0:	2180      	movs	r1, #128	@ 0x80
 80006d2:	0549      	lsls	r1, r1, #21
 80006d4:	430a      	orrs	r2, r1
 80006d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <HAL_MspInit+0x44>)
 80006da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006dc:	2380      	movs	r3, #128	@ 0x80
 80006de:	055b      	lsls	r3, r3, #21
 80006e0:	4013      	ands	r3, r2
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <HAL_TIM_Base_MspInit+0x44>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d113      	bne.n	800072e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <HAL_TIM_Base_MspInit+0x48>)
 8000708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <HAL_TIM_Base_MspInit+0x48>)
 800070c:	2102      	movs	r1, #2
 800070e:	430a      	orrs	r2, r1
 8000710:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_TIM_Base_MspInit+0x48>)
 8000714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000716:	2202      	movs	r2, #2
 8000718:	4013      	ands	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2010      	movs	r0, #16
 8000724:	f000 f9a2 	bl	8000a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000728:	2010      	movs	r0, #16
 800072a:	f000 f9b4 	bl	8000a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b004      	add	sp, #16
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	40000400 	.word	0x40000400
 800073c:	40021000 	.word	0x40021000

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	e7fd      	b.n	8000744 <NMI_Handler+0x4>

08000748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	e7fd      	b.n	800074c <HardFault_Handler+0x4>

08000750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 f8b8 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <TIM3_IRQHandler+0x30>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 f8c2 	bl	8001904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET)
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <TIM3_IRQHandler+0x30>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	2b01      	cmp	r3, #1
 800078c:	d106      	bne.n	800079c <TIM3_IRQHandler+0x28>
  {
      __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE); // Clear the interrupt flag
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <TIM3_IRQHandler+0x30>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2202      	movs	r2, #2
 8000794:	4252      	negs	r2, r2
 8000796:	611a      	str	r2, [r3, #16]

      // Call the helper function to handle PWM
      HandleMotorPWM();
 8000798:	f7ff ff76 	bl	8000688 <HandleMotorPWM>
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	20000034 	.word	0x20000034

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b4:	480d      	ldr	r0, [pc, #52]	@ (80007ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b8:	f7ff fff6 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	@ (80007f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <LoopForever+0xe>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000800 <LoopForever+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007e2:	f001 fc4d 	bl	8002080 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007e6:	f7ff fe25 	bl	8000434 <main>

080007ea <LoopForever>:

LoopForever:
  b LoopForever
 80007ea:	e7fe      	b.n	80007ea <LoopForever>
  ldr   r0, =_estack
 80007ec:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f8:	08002128 	.word	0x08002128
  ldr r2, =_sbss
 80007fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000800:	2000009c 	.word	0x2000009c

08000804 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC1_COMP_IRQHandler>
	...

08000808 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <HAL_Init+0x3c>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <HAL_Init+0x3c>)
 800081a:	2180      	movs	r1, #128	@ 0x80
 800081c:	0049      	lsls	r1, r1, #1
 800081e:	430a      	orrs	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000822:	2003      	movs	r0, #3
 8000824:	f000 f810 	bl	8000848 <HAL_InitTick>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d003      	beq.n	8000834 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	e001      	b.n	8000838 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff ff3a 	bl	80006ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000850:	230f      	movs	r3, #15
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000858:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <HAL_InitTick+0x88>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d02b      	beq.n	80008b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <HAL_InitTick+0x8c>)
 8000862:	681c      	ldr	r4, [r3, #0]
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <HAL_InitTick+0x88>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0019      	movs	r1, r3
 800086a:	23fa      	movs	r3, #250	@ 0xfa
 800086c:	0098      	lsls	r0, r3, #2
 800086e:	f7ff fc49 	bl	8000104 <__udivsi3>
 8000872:	0003      	movs	r3, r0
 8000874:	0019      	movs	r1, r3
 8000876:	0020      	movs	r0, r4
 8000878:	f7ff fc44 	bl	8000104 <__udivsi3>
 800087c:	0003      	movs	r3, r0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 f919 	bl	8000ab6 <HAL_SYSTICK_Config>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d112      	bne.n	80008ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d80a      	bhi.n	80008a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	2301      	movs	r3, #1
 8000892:	425b      	negs	r3, r3
 8000894:	2200      	movs	r2, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f8e8 	bl	8000a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089c:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <HAL_InitTick+0x90>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e00d      	b.n	80008c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008a4:	230f      	movs	r3, #15
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e008      	b.n	80008c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ae:	230f      	movs	r3, #15
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	e003      	b.n	80008c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b8:	230f      	movs	r3, #15
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	781b      	ldrb	r3, [r3, #0]
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b005      	add	sp, #20
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x1c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	001a      	movs	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_IncTick+0x20>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	18d2      	adds	r2, r2, r3
 80008ec:	4b03      	ldr	r3, [pc, #12]	@ (80008fc <HAL_IncTick+0x20>)
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000098 	.word	0x20000098

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b02      	ldr	r3, [pc, #8]	@ (8000910 <HAL_GetTick+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	0018      	movs	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	20000098 	.word	0x20000098

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	0002      	movs	r2, r0
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b7f      	cmp	r3, #127	@ 0x7f
 8000926:	d809      	bhi.n	800093c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	001a      	movs	r2, r3
 800092e:	231f      	movs	r3, #31
 8000930:	401a      	ands	r2, r3
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <__NVIC_EnableIRQ+0x30>)
 8000934:	2101      	movs	r1, #1
 8000936:	4091      	lsls	r1, r2
 8000938:	000a      	movs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b002      	add	sp, #8
 8000942:	bd80      	pop	{r7, pc}
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	0002      	movs	r2, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b7f      	cmp	r3, #127	@ 0x7f
 800095c:	d828      	bhi.n	80009b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a1c <__NVIC_SetPriority+0xd4>)
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	33c0      	adds	r3, #192	@ 0xc0
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	589b      	ldr	r3, [r3, r2]
 800096e:	1dfa      	adds	r2, r7, #7
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	0011      	movs	r1, r2
 8000974:	2203      	movs	r2, #3
 8000976:	400a      	ands	r2, r1
 8000978:	00d2      	lsls	r2, r2, #3
 800097a:	21ff      	movs	r1, #255	@ 0xff
 800097c:	4091      	lsls	r1, r2
 800097e:	000a      	movs	r2, r1
 8000980:	43d2      	mvns	r2, r2
 8000982:	401a      	ands	r2, r3
 8000984:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	019b      	lsls	r3, r3, #6
 800098a:	22ff      	movs	r2, #255	@ 0xff
 800098c:	401a      	ands	r2, r3
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	0018      	movs	r0, r3
 8000994:	2303      	movs	r3, #3
 8000996:	4003      	ands	r3, r0
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099c:	481f      	ldr	r0, [pc, #124]	@ (8000a1c <__NVIC_SetPriority+0xd4>)
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	430a      	orrs	r2, r1
 80009a8:	33c0      	adds	r3, #192	@ 0xc0
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ae:	e031      	b.n	8000a14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <__NVIC_SetPriority+0xd8>)
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0019      	movs	r1, r3
 80009b8:	230f      	movs	r3, #15
 80009ba:	400b      	ands	r3, r1
 80009bc:	3b08      	subs	r3, #8
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3306      	adds	r3, #6
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	3304      	adds	r3, #4
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	1dfa      	adds	r2, r7, #7
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	0011      	movs	r1, r2
 80009d0:	2203      	movs	r2, #3
 80009d2:	400a      	ands	r2, r1
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	21ff      	movs	r1, #255	@ 0xff
 80009d8:	4091      	lsls	r1, r2
 80009da:	000a      	movs	r2, r1
 80009dc:	43d2      	mvns	r2, r2
 80009de:	401a      	ands	r2, r3
 80009e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	22ff      	movs	r2, #255	@ 0xff
 80009e8:	401a      	ands	r2, r3
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	0018      	movs	r0, r3
 80009f0:	2303      	movs	r3, #3
 80009f2:	4003      	ands	r3, r0
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f8:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <__NVIC_SetPriority+0xd8>)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	001c      	movs	r4, r3
 8000a00:	230f      	movs	r3, #15
 8000a02:	4023      	ands	r3, r4
 8000a04:	3b08      	subs	r3, #8
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	3306      	adds	r3, #6
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	18c3      	adds	r3, r0, r3
 8000a10:	3304      	adds	r3, #4
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b003      	add	sp, #12
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	2380      	movs	r3, #128	@ 0x80
 8000a32:	045b      	lsls	r3, r3, #17
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d301      	bcc.n	8000a3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e010      	b.n	8000a5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <SysTick_Config+0x44>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	3a01      	subs	r2, #1
 8000a42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a44:	2301      	movs	r3, #1
 8000a46:	425b      	negs	r3, r3
 8000a48:	2103      	movs	r1, #3
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff ff7c 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SysTick_Config+0x44>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SysTick_Config+0x44>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	210f      	movs	r1, #15
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	1c02      	adds	r2, r0, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	0011      	movs	r1, r2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff ff5d 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b25b      	sxtb	r3, r3
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff33 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff ffaf 	bl	8000a24 <SysTick_Config>
 8000ac6:	0003      	movs	r3, r0
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	e147      	b.n	8000d70 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	000a      	movs	r2, r1
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d100      	bne.n	8000af8 <HAL_GPIO_Init+0x28>
 8000af6:	e138      	b.n	8000d6a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2203      	movs	r2, #3
 8000afe:	4013      	ands	r3, r2
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d005      	beq.n	8000b10 <HAL_GPIO_Init+0x40>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2203      	movs	r2, #3
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d130      	bne.n	8000b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	43da      	mvns	r2, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	409a      	lsls	r2, r3
 8000b32:	0013      	movs	r3, r2
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b46:	2201      	movs	r2, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2203      	movs	r2, #3
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d017      	beq.n	8000bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d123      	bne.n	8000c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	08da      	lsrs	r2, r3, #3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3208      	adds	r2, #8
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	58d3      	ldr	r3, [r2, r3]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	2207      	movs	r2, #7
 8000bcc:	4013      	ands	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2107      	movs	r1, #7
 8000be6:	400b      	ands	r3, r1
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	08da      	lsrs	r2, r3, #3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3208      	adds	r2, #8
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	6939      	ldr	r1, [r7, #16]
 8000c00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2203      	movs	r2, #3
 8000c20:	401a      	ands	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	23c0      	movs	r3, #192	@ 0xc0
 8000c3c:	029b      	lsls	r3, r3, #10
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d100      	bne.n	8000c44 <HAL_GPIO_Init+0x174>
 8000c42:	e092      	b.n	8000d6a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c44:	4a50      	ldr	r2, [pc, #320]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3318      	adds	r3, #24
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	589b      	ldr	r3, [r3, r2]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	2203      	movs	r2, #3
 8000c56:	4013      	ands	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	43da      	mvns	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	23a0      	movs	r3, #160	@ 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d013      	beq.n	8000c9a <HAL_GPIO_Init+0x1ca>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a45      	ldr	r2, [pc, #276]	@ (8000d8c <HAL_GPIO_Init+0x2bc>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d00d      	beq.n	8000c96 <HAL_GPIO_Init+0x1c6>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a44      	ldr	r2, [pc, #272]	@ (8000d90 <HAL_GPIO_Init+0x2c0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d007      	beq.n	8000c92 <HAL_GPIO_Init+0x1c2>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a43      	ldr	r2, [pc, #268]	@ (8000d94 <HAL_GPIO_Init+0x2c4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_GPIO_Init+0x1be>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x1cc>
 8000c8e:	2305      	movs	r3, #5
 8000c90:	e004      	b.n	8000c9c <HAL_GPIO_Init+0x1cc>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x1cc>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x1cc>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000cac:	4936      	ldr	r1, [pc, #216]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cba:	4b33      	ldr	r3, [pc, #204]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	2380      	movs	r3, #128	@ 0x80
 8000cd0:	035b      	lsls	r3, r3, #13
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ce4:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	039b      	lsls	r3, r3, #14
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000d10:	2384      	movs	r3, #132	@ 0x84
 8000d12:	58d3      	ldr	r3, [r2, r3]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d34:	4914      	ldr	r1, [pc, #80]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000d36:	2284      	movs	r2, #132	@ 0x84
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d3c:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	2380      	movs	r3, #128	@ 0x80
 8000d40:	58d3      	ldr	r3, [r2, r3]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	025b      	lsls	r3, r3, #9
 8000d56:	4013      	ands	r3, r2
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d62:	4909      	ldr	r1, [pc, #36]	@ (8000d88 <HAL_GPIO_Init+0x2b8>)
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	40da      	lsrs	r2, r3
 8000d78:	1e13      	subs	r3, r2, #0
 8000d7a:	d000      	beq.n	8000d7e <HAL_GPIO_Init+0x2ae>
 8000d7c:	e6b0      	b.n	8000ae0 <HAL_GPIO_Init+0x10>
  }
}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b006      	add	sp, #24
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021800 	.word	0x40021800
 8000d8c:	50000400 	.word	0x50000400
 8000d90:	50000800 	.word	0x50000800
 8000d94:	50000c00 	.word	0x50000c00

08000d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	0008      	movs	r0, r1
 8000da2:	0011      	movs	r1, r2
 8000da4:	1cbb      	adds	r3, r7, #2
 8000da6:	1c02      	adds	r2, r0, #0
 8000da8:	801a      	strh	r2, [r3, #0]
 8000daa:	1c7b      	adds	r3, r7, #1
 8000dac:	1c0a      	adds	r2, r1, #0
 8000dae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db0:	1c7b      	adds	r3, r7, #1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db8:	1cbb      	adds	r3, r7, #2
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc0:	e003      	b.n	8000dca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc2:	1cbb      	adds	r3, r7, #2
 8000dc4:	881a      	ldrh	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ddc:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	0019      	movs	r1, r3
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d11f      	bne.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	189b      	adds	r3, r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4912      	ldr	r1, [pc, #72]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff f97c 	bl	8000104 <__udivsi3>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e12:	e008      	b.n	8000e26 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e001      	b.n	8000e26 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e009      	b.n	8000e3a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	401a      	ands	r2, r3
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d0ed      	beq.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	40007000 	.word	0x40007000
 8000e48:	fffff9ff 	.word	0xfffff9ff
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	000f4240 	.word	0x000f4240

08000e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e2fe      	b.n	8001464 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0x1e>
 8000e70:	e07c      	b.n	8000f6c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e72:	4bc3      	ldr	r3, [pc, #780]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2238      	movs	r2, #56	@ 0x38
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e7c:	4bc0      	ldr	r3, [pc, #768]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	2203      	movs	r2, #3
 8000e82:	4013      	ands	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	2b10      	cmp	r3, #16
 8000e8a:	d102      	bne.n	8000e92 <HAL_RCC_OscConfig+0x3e>
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d002      	beq.n	8000e98 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d10b      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e98:	4bb9      	ldr	r3, [pc, #740]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d062      	beq.n	8000f6a <HAL_RCC_OscConfig+0x116>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d15e      	bne.n	8000f6a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e2d9      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d107      	bne.n	8000ecc <HAL_RCC_OscConfig+0x78>
 8000ebc:	4bb0      	ldr	r3, [pc, #704]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4baf      	ldr	r3, [pc, #700]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	2180      	movs	r1, #128	@ 0x80
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e020      	b.n	8000f0e <HAL_RCC_OscConfig+0xba>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	23a0      	movs	r3, #160	@ 0xa0
 8000ed2:	02db      	lsls	r3, r3, #11
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10e      	bne.n	8000ef6 <HAL_RCC_OscConfig+0xa2>
 8000ed8:	4ba9      	ldr	r3, [pc, #676]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4ba8      	ldr	r3, [pc, #672]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	2180      	movs	r1, #128	@ 0x80
 8000ee0:	02c9      	lsls	r1, r1, #11
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4ba6      	ldr	r3, [pc, #664]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4ba5      	ldr	r3, [pc, #660]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	2180      	movs	r1, #128	@ 0x80
 8000eee:	0249      	lsls	r1, r1, #9
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e00b      	b.n	8000f0e <HAL_RCC_OscConfig+0xba>
 8000ef6:	4ba2      	ldr	r3, [pc, #648]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4ba1      	ldr	r3, [pc, #644]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	49a1      	ldr	r1, [pc, #644]	@ (8001184 <HAL_RCC_OscConfig+0x330>)
 8000efe:	400a      	ands	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	4b9f      	ldr	r3, [pc, #636]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b9e      	ldr	r3, [pc, #632]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	499f      	ldr	r1, [pc, #636]	@ (8001188 <HAL_RCC_OscConfig+0x334>)
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d014      	beq.n	8000f40 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f16:	f7ff fcf3 	bl	8000900 <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fcee 	bl	8000900 <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	@ 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e298      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f32:	4b93      	ldr	r3, [pc, #588]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0xcc>
 8000f3e:	e015      	b.n	8000f6c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f40:	f7ff fcde 	bl	8000900 <HAL_GetTick>
 8000f44:	0003      	movs	r3, r0
 8000f46:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fcd9 	bl	8000900 <HAL_GetTick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b64      	cmp	r3, #100	@ 0x64
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e283      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5c:	4b88      	ldr	r3, [pc, #544]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	d1f0      	bne.n	8000f4a <HAL_RCC_OscConfig+0xf6>
 8000f68:	e000      	b.n	8000f6c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2202      	movs	r2, #2
 8000f72:	4013      	ands	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_RCC_OscConfig+0x124>
 8000f76:	e099      	b.n	80010ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f78:	4b81      	ldr	r3, [pc, #516]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2238      	movs	r2, #56	@ 0x38
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f82:	4b7f      	ldr	r3, [pc, #508]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2203      	movs	r2, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d102      	bne.n	8000f98 <HAL_RCC_OscConfig+0x144>
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d002      	beq.n	8000f9e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d135      	bne.n	800100a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9e:	4b78      	ldr	r3, [pc, #480]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	2380      	movs	r3, #128	@ 0x80
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d005      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x162>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e256      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb6:	4b72      	ldr	r3, [pc, #456]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a74      	ldr	r2, [pc, #464]	@ (800118c <HAL_RCC_OscConfig+0x338>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	021a      	lsls	r2, r3, #8
 8000fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d112      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8001190 <HAL_RCC_OscConfig+0x33c>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	0019      	movs	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	4b67      	ldr	r3, [pc, #412]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fe6:	4b66      	ldr	r3, [pc, #408]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0adb      	lsrs	r3, r3, #11
 8000fec:	2207      	movs	r2, #7
 8000fee:	4013      	ands	r3, r2
 8000ff0:	4a68      	ldr	r2, [pc, #416]	@ (8001194 <HAL_RCC_OscConfig+0x340>)
 8000ff2:	40da      	lsrs	r2, r3
 8000ff4:	4b68      	ldr	r3, [pc, #416]	@ (8001198 <HAL_RCC_OscConfig+0x344>)
 8000ff6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ff8:	4b68      	ldr	r3, [pc, #416]	@ (800119c <HAL_RCC_OscConfig+0x348>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fc23 	bl	8000848 <HAL_InitTick>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d051      	beq.n	80010aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e22c      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d030      	beq.n	8001074 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001012:	4b5b      	ldr	r3, [pc, #364]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5e      	ldr	r2, [pc, #376]	@ (8001190 <HAL_RCC_OscConfig+0x33c>)
 8001018:	4013      	ands	r3, r2
 800101a:	0019      	movs	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	4b57      	ldr	r3, [pc, #348]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001026:	4b56      	ldr	r3, [pc, #344]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b55      	ldr	r3, [pc, #340]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	0049      	lsls	r1, r1, #1
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff fc64 	bl	8000900 <HAL_GetTick>
 8001038:	0003      	movs	r3, r0
 800103a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff fc5f 	bl	8000900 <HAL_GetTick>
 8001042:	0002      	movs	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e209      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001050:	4b4b      	ldr	r3, [pc, #300]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4013      	ands	r3, r2
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b48      	ldr	r3, [pc, #288]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a4a      	ldr	r2, [pc, #296]	@ (800118c <HAL_RCC_OscConfig+0x338>)
 8001062:	4013      	ands	r3, r2
 8001064:	0019      	movs	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	021a      	lsls	r2, r3, #8
 800106c:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800106e:	430a      	orrs	r2, r1
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	e01b      	b.n	80010ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001074:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800107a:	4949      	ldr	r1, [pc, #292]	@ (80011a0 <HAL_RCC_OscConfig+0x34c>)
 800107c:	400a      	ands	r2, r1
 800107e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001080:	f7ff fc3e 	bl	8000900 <HAL_GetTick>
 8001084:	0003      	movs	r3, r0
 8001086:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fc39 	bl	8000900 <HAL_GetTick>
 800108e:	0002      	movs	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e1e3      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800109c:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2380      	movs	r3, #128	@ 0x80
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	d1f0      	bne.n	800108a <HAL_RCC_OscConfig+0x236>
 80010a8:	e000      	b.n	80010ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2208      	movs	r2, #8
 80010b2:	4013      	ands	r3, r2
 80010b4:	d047      	beq.n	8001146 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80010b6:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2238      	movs	r2, #56	@ 0x38
 80010bc:	4013      	ands	r3, r2
 80010be:	2b18      	cmp	r3, #24
 80010c0:	d10a      	bne.n	80010d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	d03c      	beq.n	8001146 <HAL_RCC_OscConfig+0x2f2>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d138      	bne.n	8001146 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e1c5      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d019      	beq.n	8001114 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010e0:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010e4:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	430a      	orrs	r2, r1
 80010ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc08 	bl	8000900 <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f6:	f7ff fc03 	bl	8000900 <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e1ad      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001108:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800110a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110c:	2202      	movs	r2, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d0f1      	beq.n	80010f6 <HAL_RCC_OscConfig+0x2a2>
 8001112:	e018      	b.n	8001146 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001116:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800111a:	2101      	movs	r1, #1
 800111c:	438a      	bics	r2, r1
 800111e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fbee 	bl	8000900 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112a:	f7ff fbe9 	bl	8000900 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e193      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800113e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001140:	2202      	movs	r2, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d1f1      	bne.n	800112a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2204      	movs	r2, #4
 800114c:	4013      	ands	r3, r2
 800114e:	d100      	bne.n	8001152 <HAL_RCC_OscConfig+0x2fe>
 8001150:	e0c6      	b.n	80012e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001152:	231f      	movs	r3, #31
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2238      	movs	r2, #56	@ 0x38
 8001160:	4013      	ands	r3, r2
 8001162:	2b20      	cmp	r3, #32
 8001164:	d11e      	bne.n	80011a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0x31e>
 8001170:	e0b6      	b.n	80012e0 <HAL_RCC_OscConfig+0x48c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d000      	beq.n	800117c <HAL_RCC_OscConfig+0x328>
 800117a:	e0b1      	b.n	80012e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e171      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
 8001180:	40021000 	.word	0x40021000
 8001184:	fffeffff 	.word	0xfffeffff
 8001188:	fffbffff 	.word	0xfffbffff
 800118c:	ffff80ff 	.word	0xffff80ff
 8001190:	ffffc7ff 	.word	0xffffc7ff
 8001194:	00f42400 	.word	0x00f42400
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004
 80011a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011a4:	4bb1      	ldr	r3, [pc, #708]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80011a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	055b      	lsls	r3, r3, #21
 80011ac:	4013      	ands	r3, r2
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_OscConfig+0x360>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x362>
 80011b4:	2300      	movs	r3, #0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d011      	beq.n	80011de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4bac      	ldr	r3, [pc, #688]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80011bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011be:	4bab      	ldr	r3, [pc, #684]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80011c0:	2180      	movs	r1, #128	@ 0x80
 80011c2:	0549      	lsls	r1, r1, #21
 80011c4:	430a      	orrs	r2, r1
 80011c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011c8:	4ba8      	ldr	r3, [pc, #672]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80011ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	055b      	lsls	r3, r3, #21
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011d6:	231f      	movs	r3, #31
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011de:	4ba4      	ldr	r3, [pc, #656]	@ (8001470 <HAL_RCC_OscConfig+0x61c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4013      	ands	r3, r2
 80011e8:	d11a      	bne.n	8001220 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ea:	4ba1      	ldr	r3, [pc, #644]	@ (8001470 <HAL_RCC_OscConfig+0x61c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4ba0      	ldr	r3, [pc, #640]	@ (8001470 <HAL_RCC_OscConfig+0x61c>)
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	0049      	lsls	r1, r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb82 	bl	8000900 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001202:	f7ff fb7d 	bl	8000900 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e127      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001214:	4b96      	ldr	r3, [pc, #600]	@ (8001470 <HAL_RCC_OscConfig+0x61c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4013      	ands	r3, r2
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x3e2>
 8001228:	4b90      	ldr	r3, [pc, #576]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800122a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800122c:	4b8f      	ldr	r3, [pc, #572]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800122e:	2101      	movs	r1, #1
 8001230:	430a      	orrs	r2, r1
 8001232:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001234:	e01c      	b.n	8001270 <HAL_RCC_OscConfig+0x41c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x404>
 800123e:	4b8b      	ldr	r3, [pc, #556]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001240:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001242:	4b8a      	ldr	r3, [pc, #552]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001244:	2104      	movs	r1, #4
 8001246:	430a      	orrs	r2, r1
 8001248:	65da      	str	r2, [r3, #92]	@ 0x5c
 800124a:	4b88      	ldr	r3, [pc, #544]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800124c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800124e:	4b87      	ldr	r3, [pc, #540]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001250:	2101      	movs	r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0x41c>
 8001258:	4b84      	ldr	r3, [pc, #528]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800125a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800125c:	4b83      	ldr	r3, [pc, #524]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800125e:	2101      	movs	r1, #1
 8001260:	438a      	bics	r2, r1
 8001262:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001264:	4b81      	ldr	r3, [pc, #516]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001268:	4b80      	ldr	r3, [pc, #512]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800126a:	2104      	movs	r1, #4
 800126c:	438a      	bics	r2, r1
 800126e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d014      	beq.n	80012a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fb42 	bl	8000900 <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001280:	e009      	b.n	8001296 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fb3d 	bl	8000900 <HAL_GetTick>
 8001286:	0002      	movs	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4a79      	ldr	r2, [pc, #484]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e0e6      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001296:	4b75      	ldr	r3, [pc, #468]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x42e>
 80012a0:	e013      	b.n	80012ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff fb2d 	bl	8000900 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012aa:	e009      	b.n	80012c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f7ff fb28 	bl	8000900 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0d1      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c0:	4b6a      	ldr	r3, [pc, #424]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80012c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c4:	2202      	movs	r2, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012ca:	231f      	movs	r3, #31
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d105      	bne.n	80012e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012d4:	4b65      	ldr	r3, [pc, #404]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80012d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012d8:	4b64      	ldr	r3, [pc, #400]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80012da:	4967      	ldr	r1, [pc, #412]	@ (8001478 <HAL_RCC_OscConfig+0x624>)
 80012dc:	400a      	ands	r2, r1
 80012de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d100      	bne.n	80012ea <HAL_RCC_OscConfig+0x496>
 80012e8:	e0bb      	b.n	8001462 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ea:	4b60      	ldr	r3, [pc, #384]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2238      	movs	r2, #56	@ 0x38
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4a4>
 80012f6:	e07b      	b.n	80013f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d156      	bne.n	80013ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001300:	4b5a      	ldr	r3, [pc, #360]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b59      	ldr	r3, [pc, #356]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001306:	495d      	ldr	r1, [pc, #372]	@ (800147c <HAL_RCC_OscConfig+0x628>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff faf8 	bl	8000900 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001316:	f7ff faf3 	bl	8000900 <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e09d      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001328:	4b50      	ldr	r3, [pc, #320]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	049b      	lsls	r3, r3, #18
 8001330:	4013      	ands	r3, r2
 8001332:	d1f0      	bne.n	8001316 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001334:	4b4d      	ldr	r3, [pc, #308]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4a51      	ldr	r2, [pc, #324]	@ (8001480 <HAL_RCC_OscConfig+0x62c>)
 800133a:	4013      	ands	r3, r2
 800133c:	0019      	movs	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1a      	ldr	r2, [r3, #32]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001360:	431a      	orrs	r2, r3
 8001362:	4b42      	ldr	r3, [pc, #264]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001364:	430a      	orrs	r2, r1
 8001366:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001368:	4b40      	ldr	r3, [pc, #256]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800136e:	2180      	movs	r1, #128	@ 0x80
 8001370:	0449      	lsls	r1, r1, #17
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	4b3c      	ldr	r3, [pc, #240]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 800137c:	2180      	movs	r1, #128	@ 0x80
 800137e:	0549      	lsls	r1, r1, #21
 8001380:	430a      	orrs	r2, r1
 8001382:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fabc 	bl	8000900 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fab7 	bl	8000900 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e061      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a0:	4b32      	ldr	r3, [pc, #200]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2380      	movs	r3, #128	@ 0x80
 80013a6:	049b      	lsls	r3, r3, #18
 80013a8:	4013      	ands	r3, r2
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x53a>
 80013ac:	e059      	b.n	8001462 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80013b4:	4931      	ldr	r1, [pc, #196]	@ (800147c <HAL_RCC_OscConfig+0x628>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff faa1 	bl	8000900 <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fa9c 	bl	8000900 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e046      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d6:	4b25      	ldr	r3, [pc, #148]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	049b      	lsls	r3, r3, #18
 80013de:	4013      	ands	r3, r2
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80013e2:	4b22      	ldr	r3, [pc, #136]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	4b21      	ldr	r3, [pc, #132]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80013e8:	4926      	ldr	r1, [pc, #152]	@ (8001484 <HAL_RCC_OscConfig+0x630>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	e038      	b.n	8001462 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e033      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <HAL_RCC_OscConfig+0x618>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2203      	movs	r2, #3
 8001406:	401a      	ands	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	429a      	cmp	r2, r3
 800140e:	d126      	bne.n	800145e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2270      	movs	r2, #112	@ 0x70
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d11f      	bne.n	800145e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	23fe      	movs	r3, #254	@ 0xfe
 8001422:	01db      	lsls	r3, r3, #7
 8001424:	401a      	ands	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d116      	bne.n	800145e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	23f8      	movs	r3, #248	@ 0xf8
 8001434:	039b      	lsls	r3, r3, #14
 8001436:	401a      	ands	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d10e      	bne.n	800145e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	23e0      	movs	r3, #224	@ 0xe0
 8001444:	051b      	lsls	r3, r3, #20
 8001446:	401a      	ands	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	0f5b      	lsrs	r3, r3, #29
 8001454:	075a      	lsls	r2, r3, #29
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b008      	add	sp, #32
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	40007000 	.word	0x40007000
 8001474:	00001388 	.word	0x00001388
 8001478:	efffffff 	.word	0xefffffff
 800147c:	feffffff 	.word	0xfeffffff
 8001480:	11c1808c 	.word	0x11c1808c
 8001484:	eefefffc 	.word	0xeefefffc

08001488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0e9      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800149c:	4b76      	ldr	r3, [pc, #472]	@ (8001678 <HAL_RCC_ClockConfig+0x1f0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2207      	movs	r2, #7
 80014a2:	4013      	ands	r3, r2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d91e      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b73      	ldr	r3, [pc, #460]	@ (8001678 <HAL_RCC_ClockConfig+0x1f0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2207      	movs	r2, #7
 80014b0:	4393      	bics	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	4b70      	ldr	r3, [pc, #448]	@ (8001678 <HAL_RCC_ClockConfig+0x1f0>)
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fa20 	bl	8000900 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014c4:	e009      	b.n	80014da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c6:	f7ff fa1b 	bl	8000900 <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	4a6a      	ldr	r2, [pc, #424]	@ (800167c <HAL_RCC_ClockConfig+0x1f4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e0ca      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014da:	4b67      	ldr	r3, [pc, #412]	@ (8001678 <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2207      	movs	r2, #7
 80014e0:	4013      	ands	r3, r2
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1ee      	bne.n	80014c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2202      	movs	r2, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d015      	beq.n	800151e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2204      	movs	r2, #4
 80014f8:	4013      	ands	r3, r2
 80014fa:	d006      	beq.n	800150a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014fc:	4b60      	ldr	r3, [pc, #384]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	4b5f      	ldr	r3, [pc, #380]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 8001502:	21e0      	movs	r1, #224	@ 0xe0
 8001504:	01c9      	lsls	r1, r1, #7
 8001506:	430a      	orrs	r2, r1
 8001508:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150a:	4b5d      	ldr	r3, [pc, #372]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4a5d      	ldr	r2, [pc, #372]	@ (8001684 <HAL_RCC_ClockConfig+0x1fc>)
 8001510:	4013      	ands	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b59      	ldr	r3, [pc, #356]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d057      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001530:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	029b      	lsls	r3, r3, #10
 8001538:	4013      	ands	r3, r2
 800153a:	d12b      	bne.n	8001594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e097      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d107      	bne.n	8001558 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001548:	4b4d      	ldr	r3, [pc, #308]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	@ 0x80
 800154e:	049b      	lsls	r3, r3, #18
 8001550:	4013      	ands	r3, r2
 8001552:	d11f      	bne.n	8001594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e08b      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4013      	ands	r3, r2
 800156a:	d113      	bne.n	8001594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e07f      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d106      	bne.n	8001586 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001578:	4b41      	ldr	r3, [pc, #260]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d108      	bne.n	8001594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e074      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001586:	4b3e      	ldr	r3, [pc, #248]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 8001588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800158a:	2202      	movs	r2, #2
 800158c:	4013      	ands	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e06d      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001594:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2207      	movs	r2, #7
 800159a:	4393      	bics	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 80015a4:	430a      	orrs	r2, r1
 80015a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a8:	f7ff f9aa 	bl	8000900 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b0:	e009      	b.n	80015c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b2:	f7ff f9a5 	bl	8000900 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	4a2f      	ldr	r2, [pc, #188]	@ (800167c <HAL_RCC_ClockConfig+0x1f4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e054      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2238      	movs	r2, #56	@ 0x38
 80015cc:	401a      	ands	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1ec      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <HAL_RCC_ClockConfig+0x1f0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2207      	movs	r2, #7
 80015de:	4013      	ands	r3, r2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d21e      	bcs.n	8001624 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <HAL_RCC_ClockConfig+0x1f0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2207      	movs	r2, #7
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <HAL_RCC_ClockConfig+0x1f0>)
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015f8:	f7ff f982 	bl	8000900 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001600:	e009      	b.n	8001616 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001602:	f7ff f97d 	bl	8000900 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	4a1b      	ldr	r2, [pc, #108]	@ (800167c <HAL_RCC_ClockConfig+0x1f4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e02c      	b.n	8001670 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <HAL_RCC_ClockConfig+0x1f0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2207      	movs	r2, #7
 800161c:	4013      	ands	r3, r2
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d1ee      	bne.n	8001602 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2204      	movs	r2, #4
 800162a:	4013      	ands	r3, r2
 800162c:	d009      	beq.n	8001642 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4a15      	ldr	r2, [pc, #84]	@ (8001688 <HAL_RCC_ClockConfig+0x200>)
 8001634:	4013      	ands	r3, r2
 8001636:	0019      	movs	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 800163e:	430a      	orrs	r2, r1
 8001640:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001642:	f000 f829 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 8001646:	0001      	movs	r1, r0
 8001648:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <HAL_RCC_ClockConfig+0x1f8>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	220f      	movs	r2, #15
 8001650:	401a      	ands	r2, r3
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <HAL_RCC_ClockConfig+0x204>)
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	58d3      	ldr	r3, [r2, r3]
 8001658:	221f      	movs	r2, #31
 800165a:	4013      	ands	r3, r2
 800165c:	000a      	movs	r2, r1
 800165e:	40da      	lsrs	r2, r3
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_ClockConfig+0x208>)
 8001662:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_RCC_ClockConfig+0x20c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff f8ed 	bl	8000848 <HAL_InitTick>
 800166e:	0003      	movs	r3, r0
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40022000 	.word	0x40022000
 800167c:	00001388 	.word	0x00001388
 8001680:	40021000 	.word	0x40021000
 8001684:	fffff0ff 	.word	0xfffff0ff
 8001688:	ffff8fff 	.word	0xffff8fff
 800168c:	080020e0 	.word	0x080020e0
 8001690:	20000000 	.word	0x20000000
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169e:	4b3c      	ldr	r3, [pc, #240]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2238      	movs	r2, #56	@ 0x38
 80016a4:	4013      	ands	r3, r2
 80016a6:	d10f      	bne.n	80016c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016a8:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0adb      	lsrs	r3, r3, #11
 80016ae:	2207      	movs	r2, #7
 80016b0:	4013      	ands	r3, r2
 80016b2:	2201      	movs	r2, #1
 80016b4:	409a      	lsls	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	4835      	ldr	r0, [pc, #212]	@ (8001794 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016be:	f7fe fd21 	bl	8000104 <__udivsi3>
 80016c2:	0003      	movs	r3, r0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	e05d      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c8:	4b31      	ldr	r3, [pc, #196]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2238      	movs	r2, #56	@ 0x38
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d102      	bne.n	80016da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x100>)
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	e054      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016da:	4b2d      	ldr	r3, [pc, #180]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2238      	movs	r2, #56	@ 0x38
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d138      	bne.n	8001758 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2203      	movs	r2, #3
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016f0:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	2207      	movs	r2, #7
 80016f8:	4013      	ands	r3, r2
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d10d      	bne.n	8001720 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	4824      	ldr	r0, [pc, #144]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x100>)
 8001708:	f7fe fcfc 	bl	8000104 <__udivsi3>
 800170c:	0003      	movs	r3, r0
 800170e:	0019      	movs	r1, r3
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	227f      	movs	r2, #127	@ 0x7f
 8001718:	4013      	ands	r3, r2
 800171a:	434b      	muls	r3, r1
 800171c:	617b      	str	r3, [r7, #20]
        break;
 800171e:	e00d      	b.n	800173c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	481c      	ldr	r0, [pc, #112]	@ (8001794 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001724:	f7fe fcee 	bl	8000104 <__udivsi3>
 8001728:	0003      	movs	r3, r0
 800172a:	0019      	movs	r1, r3
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	227f      	movs	r2, #127	@ 0x7f
 8001734:	4013      	ands	r3, r2
 8001736:	434b      	muls	r3, r1
 8001738:	617b      	str	r3, [r7, #20]
        break;
 800173a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0f5b      	lsrs	r3, r3, #29
 8001742:	2207      	movs	r2, #7
 8001744:	4013      	ands	r3, r2
 8001746:	3301      	adds	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	6978      	ldr	r0, [r7, #20]
 800174e:	f7fe fcd9 	bl	8000104 <__udivsi3>
 8001752:	0003      	movs	r3, r0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	e015      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2238      	movs	r2, #56	@ 0x38
 800175e:	4013      	ands	r3, r2
 8001760:	2b20      	cmp	r3, #32
 8001762:	d103      	bne.n	800176c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2238      	movs	r2, #56	@ 0x38
 8001772:	4013      	ands	r3, r2
 8001774:	2b18      	cmp	r3, #24
 8001776:	d103      	bne.n	8001780 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001778:	23fa      	movs	r3, #250	@ 0xfa
 800177a:	01db      	lsls	r3, r3, #7
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	e001      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001784:	693b      	ldr	r3, [r7, #16]
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b006      	add	sp, #24
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	40021000 	.word	0x40021000
 8001794:	00f42400 	.word	0x00f42400
 8001798:	007a1200 	.word	0x007a1200

0800179c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e04a      	b.n	8001844 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	223d      	movs	r2, #61	@ 0x3d
 80017b2:	5c9b      	ldrb	r3, [r3, r2]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d107      	bne.n	80017ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	223c      	movs	r2, #60	@ 0x3c
 80017be:	2100      	movs	r1, #0
 80017c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7fe ff95 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	223d      	movs	r2, #61	@ 0x3d
 80017ce:	2102      	movs	r1, #2
 80017d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3304      	adds	r3, #4
 80017da:	0019      	movs	r1, r3
 80017dc:	0010      	movs	r0, r2
 80017de:	f000 fa97 	bl	8001d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2248      	movs	r2, #72	@ 0x48
 80017e6:	2101      	movs	r1, #1
 80017e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	223e      	movs	r2, #62	@ 0x3e
 80017ee:	2101      	movs	r1, #1
 80017f0:	5499      	strb	r1, [r3, r2]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	223f      	movs	r2, #63	@ 0x3f
 80017f6:	2101      	movs	r1, #1
 80017f8:	5499      	strb	r1, [r3, r2]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2240      	movs	r2, #64	@ 0x40
 80017fe:	2101      	movs	r1, #1
 8001800:	5499      	strb	r1, [r3, r2]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2241      	movs	r2, #65	@ 0x41
 8001806:	2101      	movs	r1, #1
 8001808:	5499      	strb	r1, [r3, r2]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2242      	movs	r2, #66	@ 0x42
 800180e:	2101      	movs	r1, #1
 8001810:	5499      	strb	r1, [r3, r2]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2243      	movs	r2, #67	@ 0x43
 8001816:	2101      	movs	r1, #1
 8001818:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2244      	movs	r2, #68	@ 0x44
 800181e:	2101      	movs	r1, #1
 8001820:	5499      	strb	r1, [r3, r2]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2245      	movs	r2, #69	@ 0x45
 8001826:	2101      	movs	r1, #1
 8001828:	5499      	strb	r1, [r3, r2]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2246      	movs	r2, #70	@ 0x46
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2247      	movs	r2, #71	@ 0x47
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	223d      	movs	r2, #61	@ 0x3d
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	223d      	movs	r2, #61	@ 0x3d
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d001      	beq.n	8001864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e042      	b.n	80018ea <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	223d      	movs	r2, #61	@ 0x3d
 8001868:	2102      	movs	r1, #2
 800186a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2101      	movs	r1, #1
 8001878:	430a      	orrs	r2, r1
 800187a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1c      	ldr	r2, [pc, #112]	@ (80018f4 <HAL_TIM_Base_Start_IT+0xa8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00f      	beq.n	80018a6 <HAL_TIM_Base_Start_IT+0x5a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	@ 0x80
 800188c:	05db      	lsls	r3, r3, #23
 800188e:	429a      	cmp	r2, r3
 8001890:	d009      	beq.n	80018a6 <HAL_TIM_Base_Start_IT+0x5a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <HAL_TIM_Base_Start_IT+0xac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d004      	beq.n	80018a6 <HAL_TIM_Base_Start_IT+0x5a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_TIM_Base_Start_IT+0xb0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d116      	bne.n	80018d4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <HAL_TIM_Base_Start_IT+0xb4>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d016      	beq.n	80018e6 <HAL_TIM_Base_Start_IT+0x9a>
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	2380      	movs	r3, #128	@ 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	429a      	cmp	r2, r3
 80018c0:	d011      	beq.n	80018e6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018d2:	e008      	b.n	80018e6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2101      	movs	r1, #1
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e000      	b.n	80018e8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40000400 	.word	0x40000400
 80018fc:	40014000 	.word	0x40014000
 8001900:	00010007 	.word	0x00010007

08001904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d021      	beq.n	8001968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2202      	movs	r2, #2
 8001928:	4013      	ands	r3, r2
 800192a:	d01d      	beq.n	8001968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2203      	movs	r2, #3
 8001932:	4252      	negs	r2, r2
 8001934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2203      	movs	r2, #3
 8001944:	4013      	ands	r3, r2
 8001946:	d004      	beq.n	8001952 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	0018      	movs	r0, r3
 800194c:	f000 f9c8 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001950:	e007      	b.n	8001962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0018      	movs	r0, r3
 8001956:	f000 f9bb 	bl	8001cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	0018      	movs	r0, r3
 800195e:	f000 f9c7 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2204      	movs	r2, #4
 800196c:	4013      	ands	r3, r2
 800196e:	d022      	beq.n	80019b6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2204      	movs	r2, #4
 8001974:	4013      	ands	r3, r2
 8001976:	d01e      	beq.n	80019b6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2205      	movs	r2, #5
 800197e:	4252      	negs	r2, r2
 8001980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2202      	movs	r2, #2
 8001986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	23c0      	movs	r3, #192	@ 0xc0
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d004      	beq.n	80019a0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f000 f9a1 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 800199e:	e007      	b.n	80019b0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 f994 	bl	8001cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 f9a0 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2208      	movs	r2, #8
 80019ba:	4013      	ands	r3, r2
 80019bc:	d021      	beq.n	8001a02 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2208      	movs	r2, #8
 80019c2:	4013      	ands	r3, r2
 80019c4:	d01d      	beq.n	8001a02 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2209      	movs	r2, #9
 80019cc:	4252      	negs	r2, r2
 80019ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2204      	movs	r2, #4
 80019d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2203      	movs	r2, #3
 80019de:	4013      	ands	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f000 f97b 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 80019ea:	e007      	b.n	80019fc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f96e 	bl	8001cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f97a 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2210      	movs	r2, #16
 8001a06:	4013      	ands	r3, r2
 8001a08:	d022      	beq.n	8001a50 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d01e      	beq.n	8001a50 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2211      	movs	r2, #17
 8001a18:	4252      	negs	r2, r2
 8001a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2208      	movs	r2, #8
 8001a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	23c0      	movs	r3, #192	@ 0xc0
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d004      	beq.n	8001a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 f954 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001a38:	e007      	b.n	8001a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 f947 	bl	8001cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f953 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2201      	movs	r2, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d00c      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d008      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2202      	movs	r2, #2
 8001a66:	4252      	negs	r2, r2
 8001a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 f927 	bl	8001cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2280      	movs	r2, #128	@ 0x80
 8001a76:	4013      	ands	r3, r2
 8001a78:	d104      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	019b      	lsls	r3, r3, #6
 8001a80:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a82:	d00b      	beq.n	8001a9c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2280      	movs	r2, #128	@ 0x80
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1e      	ldr	r2, [pc, #120]	@ (8001b0c <HAL_TIM_IRQHandler+0x208>)
 8001a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 fada 	bl	8002050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d00b      	beq.n	8001abe <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <HAL_TIM_IRQHandler+0x20c>)
 8001ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f000 fad1 	bl	8002060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2240      	movs	r2, #64	@ 0x40
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d00c      	beq.n	8001ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2240      	movs	r2, #64	@ 0x40
 8001aca:	4013      	ands	r3, r2
 8001acc:	d008      	beq.n	8001ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2241      	movs	r2, #65	@ 0x41
 8001ad4:	4252      	negs	r2, r2
 8001ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 f910 	bl	8001d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d00c      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	4013      	ands	r3, r2
 8001aee:	d008      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2221      	movs	r2, #33	@ 0x21
 8001af6:	4252      	negs	r2, r2
 8001af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 fa9f 	bl	8002040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b004      	add	sp, #16
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	ffffdf7f 	.word	0xffffdf7f
 8001b10:	fffffeff 	.word	0xfffffeff

08001b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	230f      	movs	r3, #15
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	223c      	movs	r2, #60	@ 0x3c
 8001b2a:	5c9b      	ldrb	r3, [r3, r2]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_TIM_ConfigClockSource+0x20>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e0bc      	b.n	8001cae <HAL_TIM_ConfigClockSource+0x19a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	223c      	movs	r2, #60	@ 0x3c
 8001b38:	2101      	movs	r1, #1
 8001b3a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	223d      	movs	r2, #61	@ 0x3d
 8001b40:	2102      	movs	r1, #2
 8001b42:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	@ (8001cb8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4a59      	ldr	r2, [pc, #356]	@ (8001cbc <HAL_TIM_ConfigClockSource+0x1a8>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2280      	movs	r2, #128	@ 0x80
 8001b6a:	0192      	lsls	r2, r2, #6
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d040      	beq.n	8001bf2 <HAL_TIM_ConfigClockSource+0xde>
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	0192      	lsls	r2, r2, #6
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d900      	bls.n	8001b7a <HAL_TIM_ConfigClockSource+0x66>
 8001b78:	e088      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
 8001b7a:	2280      	movs	r2, #128	@ 0x80
 8001b7c:	0152      	lsls	r2, r2, #5
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d100      	bne.n	8001b84 <HAL_TIM_ConfigClockSource+0x70>
 8001b82:	e088      	b.n	8001c96 <HAL_TIM_ConfigClockSource+0x182>
 8001b84:	2280      	movs	r2, #128	@ 0x80
 8001b86:	0152      	lsls	r2, r2, #5
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d900      	bls.n	8001b8e <HAL_TIM_ConfigClockSource+0x7a>
 8001b8c:	e07e      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
 8001b8e:	2b70      	cmp	r3, #112	@ 0x70
 8001b90:	d018      	beq.n	8001bc4 <HAL_TIM_ConfigClockSource+0xb0>
 8001b92:	d900      	bls.n	8001b96 <HAL_TIM_ConfigClockSource+0x82>
 8001b94:	e07a      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
 8001b96:	2b60      	cmp	r3, #96	@ 0x60
 8001b98:	d04f      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0x126>
 8001b9a:	d900      	bls.n	8001b9e <HAL_TIM_ConfigClockSource+0x8a>
 8001b9c:	e076      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
 8001b9e:	2b50      	cmp	r3, #80	@ 0x50
 8001ba0:	d03b      	beq.n	8001c1a <HAL_TIM_ConfigClockSource+0x106>
 8001ba2:	d900      	bls.n	8001ba6 <HAL_TIM_ConfigClockSource+0x92>
 8001ba4:	e072      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
 8001ba6:	2b40      	cmp	r3, #64	@ 0x40
 8001ba8:	d057      	beq.n	8001c5a <HAL_TIM_ConfigClockSource+0x146>
 8001baa:	d900      	bls.n	8001bae <HAL_TIM_ConfigClockSource+0x9a>
 8001bac:	e06e      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
 8001bae:	2b30      	cmp	r3, #48	@ 0x30
 8001bb0:	d063      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x166>
 8001bb2:	d86b      	bhi.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d060      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x166>
 8001bb8:	d868      	bhi.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d05d      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x166>
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d05b      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x166>
 8001bc2:	e063      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bd4:	f000 f9a6 	bl	8001f24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2277      	movs	r2, #119	@ 0x77
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	609a      	str	r2, [r3, #8]
      break;
 8001bf0:	e052      	b.n	8001c98 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c02:	f000 f98f 	bl	8001f24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2180      	movs	r1, #128	@ 0x80
 8001c12:	01c9      	lsls	r1, r1, #7
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]
      break;
 8001c18:	e03e      	b.n	8001c98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c26:	001a      	movs	r2, r3
 8001c28:	f000 f900 	bl	8001e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2150      	movs	r1, #80	@ 0x50
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f95a 	bl	8001eec <TIM_ITRx_SetConfig>
      break;
 8001c38:	e02e      	b.n	8001c98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c46:	001a      	movs	r2, r3
 8001c48:	f000 f91e 	bl	8001e88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2160      	movs	r1, #96	@ 0x60
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 f94a 	bl	8001eec <TIM_ITRx_SetConfig>
      break;
 8001c58:	e01e      	b.n	8001c98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c66:	001a      	movs	r2, r3
 8001c68:	f000 f8e0 	bl	8001e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2140      	movs	r1, #64	@ 0x40
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f93a 	bl	8001eec <TIM_ITRx_SetConfig>
      break;
 8001c78:	e00e      	b.n	8001c98 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0019      	movs	r1, r3
 8001c84:	0010      	movs	r0, r2
 8001c86:	f000 f931 	bl	8001eec <TIM_ITRx_SetConfig>
      break;
 8001c8a:	e005      	b.n	8001c98 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
      break;
 8001c94:	e000      	b.n	8001c98 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001c96:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	223d      	movs	r2, #61	@ 0x3d
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	223c      	movs	r2, #60	@ 0x3c
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]

  return status;
 8001ca8:	230f      	movs	r3, #15
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	781b      	ldrb	r3, [r3, #0]
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	ffceff88 	.word	0xffceff88
 8001cbc:	ffff00ff 	.word	0xffff00ff

08001cc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ce8:	46c0      	nop			@ (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cf8:	46c0      	nop			@ (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3b      	ldr	r2, [pc, #236]	@ (8001e10 <TIM_Base_SetConfig+0x100>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d008      	beq.n	8001d3a <TIM_Base_SetConfig+0x2a>
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	05db      	lsls	r3, r3, #23
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d003      	beq.n	8001d3a <TIM_Base_SetConfig+0x2a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a37      	ldr	r2, [pc, #220]	@ (8001e14 <TIM_Base_SetConfig+0x104>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d108      	bne.n	8001d4c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2270      	movs	r2, #112	@ 0x70
 8001d3e:	4393      	bics	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a30      	ldr	r2, [pc, #192]	@ (8001e10 <TIM_Base_SetConfig+0x100>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d018      	beq.n	8001d86 <TIM_Base_SetConfig+0x76>
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d013      	beq.n	8001d86 <TIM_Base_SetConfig+0x76>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a2c      	ldr	r2, [pc, #176]	@ (8001e14 <TIM_Base_SetConfig+0x104>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00f      	beq.n	8001d86 <TIM_Base_SetConfig+0x76>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a2b      	ldr	r2, [pc, #172]	@ (8001e18 <TIM_Base_SetConfig+0x108>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00b      	beq.n	8001d86 <TIM_Base_SetConfig+0x76>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a2a      	ldr	r2, [pc, #168]	@ (8001e1c <TIM_Base_SetConfig+0x10c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0x76>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a29      	ldr	r2, [pc, #164]	@ (8001e20 <TIM_Base_SetConfig+0x110>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0x76>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a28      	ldr	r2, [pc, #160]	@ (8001e24 <TIM_Base_SetConfig+0x114>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a27      	ldr	r2, [pc, #156]	@ (8001e28 <TIM_Base_SetConfig+0x118>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2280      	movs	r2, #128	@ 0x80
 8001d9c:	4393      	bics	r3, r2
 8001d9e:	001a      	movs	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <TIM_Base_SetConfig+0x100>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00b      	beq.n	8001dde <TIM_Base_SetConfig+0xce>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a14      	ldr	r2, [pc, #80]	@ (8001e1c <TIM_Base_SetConfig+0x10c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <TIM_Base_SetConfig+0xce>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <TIM_Base_SetConfig+0x110>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d003      	beq.n	8001dde <TIM_Base_SetConfig+0xce>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a12      	ldr	r2, [pc, #72]	@ (8001e24 <TIM_Base_SetConfig+0x114>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d103      	bne.n	8001de6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4393      	bics	r3, r2
 8001e00:	001a      	movs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]
  }
}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b004      	add	sp, #16
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40002000 	.word	0x40002000
 8001e1c:	40014000 	.word	0x40014000
 8001e20:	40014400 	.word	0x40014400
 8001e24:	40014800 	.word	0x40014800
 8001e28:	fffffcff 	.word	0xfffffcff

08001e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4393      	bics	r3, r2
 8001e46:	001a      	movs	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	22f0      	movs	r2, #240	@ 0xf0
 8001e56:	4393      	bics	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	220a      	movs	r2, #10
 8001e68:	4393      	bics	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	621a      	str	r2, [r3, #32]
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b006      	add	sp, #24
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <TIM_TI2_ConfigInputStage+0x60>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	031b      	lsls	r3, r3, #12
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	22a0      	movs	r2, #160	@ 0xa0
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	621a      	str	r2, [r3, #32]
}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b006      	add	sp, #24
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	ffff0fff 	.word	0xffff0fff

08001eec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <TIM_ITRx_SetConfig+0x34>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	ffcfff8f 	.word	0xffcfff8f

08001f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	4a09      	ldr	r2, [pc, #36]	@ (8001f60 <TIM_ETR_SetConfig+0x3c>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	021a      	lsls	r2, r3, #8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	609a      	str	r2, [r3, #8]
}
 8001f58:	46c0      	nop			@ (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b006      	add	sp, #24
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	ffff00ff 	.word	0xffff00ff

08001f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	223c      	movs	r2, #60	@ 0x3c
 8001f72:	5c9b      	ldrb	r3, [r3, r2]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e055      	b.n	8002028 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	223c      	movs	r2, #60	@ 0x3c
 8001f80:	2101      	movs	r1, #1
 8001f82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	223d      	movs	r2, #61	@ 0x3d
 8001f88:	2102      	movs	r1, #2
 8001f8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a22      	ldr	r2, [pc, #136]	@ (8002034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2270      	movs	r2, #112	@ 0x70
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a16      	ldr	r2, [pc, #88]	@ (8002030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00f      	beq.n	8001ffc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	05db      	lsls	r3, r3, #23
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d009      	beq.n	8001ffc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	@ (800203c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d10c      	bne.n	8002016 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	4393      	bics	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	4313      	orrs	r3, r2
 800200c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	223d      	movs	r2, #61	@ 0x3d
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	223c      	movs	r2, #60	@ 0x3c
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b004      	add	sp, #16
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40012c00 	.word	0x40012c00
 8002034:	ff0fffff 	.word	0xff0fffff
 8002038:	40000400 	.word	0x40000400
 800203c:	40014000 	.word	0x40014000

08002040 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002058:	46c0      	nop			@ (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b002      	add	sp, #8
 800206e:	bd80      	pop	{r7, pc}

08002070 <memset>:
 8002070:	0003      	movs	r3, r0
 8002072:	1882      	adds	r2, r0, r2
 8002074:	4293      	cmp	r3, r2
 8002076:	d100      	bne.n	800207a <memset+0xa>
 8002078:	4770      	bx	lr
 800207a:	7019      	strb	r1, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	e7f9      	b.n	8002074 <memset+0x4>

08002080 <__libc_init_array>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	2600      	movs	r6, #0
 8002084:	4c0c      	ldr	r4, [pc, #48]	@ (80020b8 <__libc_init_array+0x38>)
 8002086:	4d0d      	ldr	r5, [pc, #52]	@ (80020bc <__libc_init_array+0x3c>)
 8002088:	1b64      	subs	r4, r4, r5
 800208a:	10a4      	asrs	r4, r4, #2
 800208c:	42a6      	cmp	r6, r4
 800208e:	d109      	bne.n	80020a4 <__libc_init_array+0x24>
 8002090:	2600      	movs	r6, #0
 8002092:	f000 f819 	bl	80020c8 <_init>
 8002096:	4c0a      	ldr	r4, [pc, #40]	@ (80020c0 <__libc_init_array+0x40>)
 8002098:	4d0a      	ldr	r5, [pc, #40]	@ (80020c4 <__libc_init_array+0x44>)
 800209a:	1b64      	subs	r4, r4, r5
 800209c:	10a4      	asrs	r4, r4, #2
 800209e:	42a6      	cmp	r6, r4
 80020a0:	d105      	bne.n	80020ae <__libc_init_array+0x2e>
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
 80020a4:	00b3      	lsls	r3, r6, #2
 80020a6:	58eb      	ldr	r3, [r5, r3]
 80020a8:	4798      	blx	r3
 80020aa:	3601      	adds	r6, #1
 80020ac:	e7ee      	b.n	800208c <__libc_init_array+0xc>
 80020ae:	00b3      	lsls	r3, r6, #2
 80020b0:	58eb      	ldr	r3, [r5, r3]
 80020b2:	4798      	blx	r3
 80020b4:	3601      	adds	r6, #1
 80020b6:	e7f2      	b.n	800209e <__libc_init_array+0x1e>
 80020b8:	08002120 	.word	0x08002120
 80020bc:	08002120 	.word	0x08002120
 80020c0:	08002124 	.word	0x08002124
 80020c4:	08002120 	.word	0x08002120

080020c8 <_init>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	46c0      	nop			@ (mov r8, r8)
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr

080020d4 <_fini>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr
